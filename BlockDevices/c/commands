/*******************************************************************
 * File:        commands
 * Purpose:     Implementation of the *Commands
 * Author:      Chris Johns
 ******************************************************************/

#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include "kernel.h"
#include "swis.h"

#include "modhead.h"
#include "commands.h"
#include "devices.h"

typedef struct idmessages_s {
    int num;
    const char *message;
} idmessages_t;
#define IDMESSAGE_LAST (-1)


static idmessages_t interface_type_names[] = {
    { BlockDevice_InterfaceType_Unknown, "-" },
    { BlockDevice_InterfaceType_FDC, "FDC" },
    { BlockDevice_InterfaceType_ST506, "ST506" },
    { BlockDevice_InterfaceType_IDE, "ATA" },
    { BlockDevice_InterfaceType_SATA, "SATA" },
    { BlockDevice_InterfaceType_SCSI, "SCSI" },
    { BlockDevice_InterfaceType_NVMe, "NVMe" },
    { IDMESSAGE_LAST }
};


static idmessages_t interface_connection_names[] = {
    { BlockDevice_InterfaceConnection_Unknown, "-" },
    { BlockDevice_InterfaceConnection_Motherboard, "M/B" },
    { BlockDevice_InterfaceConnection_Podule, "Podule" },
    { BlockDevice_InterfaceConnection_PCI, "PCI" },
    { BlockDevice_InterfaceConnection_Parallel, "Paralllel" },
    { BlockDevice_InterfaceConnection_Serial, "Serial" },
    { BlockDevice_InterfaceConnection_USB, "USB" },
    { IDMESSAGE_LAST }
};


static idmessages_t media_type_names[] = {
    { BlockDevice_MediaType_Unknown, "-" },
    { BlockDevice_MediaType_Floppy, "Floppy" },
    { BlockDevice_MediaType_HDD, "HDD" },
    { BlockDevice_MediaType_SSD, "SSD" },
    { BlockDevice_MediaType_RAM, "RAM" },
    { BlockDevice_MediaType_CD, "CD" },
    { BlockDevice_MediaType_DVD, "DVD" },
    { BlockDevice_MediaType_BD, "BD" },
    { IDMESSAGE_LAST }
};


static idmessages_t partition_scheme_names[] = {
    { BlockDevice_PartitionScheme_MBR, "MBR" },
    { BlockDevice_PartitionScheme_GPT, "GPT" },
    { BlockDevice_PartitionScheme_FileCore, "FileCore" },
    { IDMESSAGE_LAST }
};


/*******************************************************************
 Function:      format_capacity
 Description:   Formats a capacity string
 Parameters:    block_count, block_size = number and size of blocks
                buffer -> where to put the resulting string.
 Returns:       None
 ******************************************************************/
static char *unit_names[] = { "B", "KB", "MB", "GB", "TB" };

static void format_capacity(UINT64 block_count, unsigned block_size, char *buffer)
{
    unsigned long count, units = 0;
    double value;
    LL_L2UI(count, block_count);
    value = count;
    value = value * block_size;

    while (value > 9999 && units < 5) {
      value = value / 1024.0;
      units += 1;
    }

    sprintf(buffer, "%0.1f %s", value, unit_names[units]);
}

/*******************************************************************
 Function:      lookup
 Description:   Look up a descriptions in a table.
 Parameters:    num = number to lookup
                msgs-> the table of messages (idmessages_t list)
 Returns:       pointer to the message, or def if no value found.
 ******************************************************************/
const char *lookup(int num, idmessages_t *msgs)
{
  /* FIXME: Internationalising these message lookups
     could be done here if we cared */

    while (msgs->num != IDMESSAGE_LAST)
    {
        if (msgs->num == num) {
          return msgs->message;
        }
        msgs++;
    }
    return "";
}


/*******************************************************************
 Function:      Cmd_BlockDevices
 Description:   Display information about the devices
 Parameters:    none
 Returns:       pointer to an error block if failed
                NULL if successful
 ******************************************************************/
_kernel_oserror *Cmd_BlockDevices(void)
{
  device_t *device = NULL;

    printf("%-4s %-24s %-8s %-5s %-5s\n",
           "Dev.", "Description", "Capacity", "IFace", "Media");


    for (device = 0; (device=devices_after(device)) != NULL; )
    {
        char capacity[6];

        format_capacity(device->info.block_count, device->info.block_size, capacity);

        printf("%-4i %-24s %-8s %-5s %-5s\n",
               (int)device->device_id,
               device->info.description,
               capacity,
               lookup(device->info.interface_type, interface_type_names),
               lookup(device->info.media_type, media_type_names)
               );
/*
        printf("%5s   %-24s  %-32s  %-9s  %s\n",
               "",
               device->info.manufacturer ? device->info.manufacturer : "",
               device->info.product      ? device->info.product      : "",
               device->info.serial       ? device->info.serial       : "",
               device->info.firmware     ? device->info.firmware     : "");
*/
    }
    return NULL;
}

/*******************************************************************
 Function:      Cmd_BlockDeviceInfo
 Description:   Display information about a device.
 Parameters:    
 Returns:       pointer to an error block if failed
                NULL if successful
 ******************************************************************/
_kernel_oserror *Cmd_BlockDeviceInfo(const char *arg_string, int argc)
{
    device_t *device=devices_find(atoi(arg_string));
    return NULL;
}

