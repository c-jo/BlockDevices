/*******************************************************************
 * File:        devices
 * Purpose:     Management of block devices
 * Author:      Chris Johns
 ******************************************************************/

#include <stdlib.h>
#include "kernel.h"

#include "devices.h"
#include <stdio.h>

#include "swis.h"

int next_id;
device_t* devices;

/*******************************************************************
 Function:      devices_notify_announce
 Description:   Announce the starting, or dying, of a device
 Parameters:    device-> the device to announce
                started = 1 if started; 0 if dying
 Returns:       none
 ******************************************************************/
static void device_notify_announce(device_t *device, int started)
{
    _swix(OS_ServiceCall, _INR(0,1),
                          device->device_id,
                          started ? Service_BlockDevices_DeviceAdded
                                  : Service_BlockDevices_DeviceRemoved);
}

/*******************************************************************
 Function:      devices_init
 Description:   Initialise the block devices system
 Parameters:    none
 Returns:       0 if successful; 1 if failed
 ******************************************************************/
int devices_init(void)
{
    next_id = 1;
    devices = NULL;

    return 0;
}

/*******************************************************************
 Function:      devices_final
 Description:   Finalise the devices system
 Parameters:    none
 Returns:       0 if successful; 1 if failed
 ******************************************************************/
int devices_final(void)
{
    device_t *device = devices;

    while (device)
    {
        device_t *next = device->next;
        device_notify_announce(device, 0);
        device_destroy(device);
        device = next;
    }

    return 0;
}

/*******************************************************************
 Function:      devices_register
 Description:   Register a device with the system
 Parameters:    device-> the device that we're registering
 Returns:       0 if successful; 1 if failed
 ******************************************************************/
int devices_register(device_t *device)
{
    device->device_id = next_id++;
    /* FIXME: If we've wrapped, this is not sufficient; we need to find a gap.
     *        this case is unlikely so I don't care for now.
     */
    device->next = NULL;

    if (devices == 0)
    {
        /* It's the first device */
        devices = device;
    }
    else
    {
        /* Attach to the end of the devices list */
        device_t* last = devices;
        while (last->next != 0) last = last->next;
        last->next = device;
    }

    /* Issue service that we have a new device */
    device_notify_announce(device, 1);
    return 0;
}


/*******************************************************************
 Function:      devices_deregister
 Description:   Deregister a device from the system
 Parameters:    device-> the device that we're registering
 Returns:       0 if successful; 1 if failed
 ******************************************************************/
int devices_deregister(int device_id)
{
    device_t *cur = devices;
    device_t *last = 0;

    while (cur && cur->device_id != device_id)
    {
        last = cur;
        cur = cur->next;
    }
    if (cur == NULL)
    {
        /* We reached the end of the list without finding the device - failed */
        return 1;
    }

    if (last == 0) {
        /* We were the first item */
        devices = cur->next;
    }
    else
    {
        /* Remove from the list */
        last->next = cur->next;
    }

    /* Issue service that we have removed a device */
    device_notify_announce(cur, 0);

    /* Finally free the memory */
    device_destroy(cur);
    return 0;
}

/*******************************************************************
 Function:      devices_rescan
 Description:   Rescans a device
 Parameters:    device-> the device that we're rescanning
 Returns:       0 if successful; 1 if failed
 ******************************************************************/
int devices_rescan(int device_id)
{
    device_t *cur = devices;

    while (cur && cur->device_id != device_id)
        cur = cur->next;

    if (cur == NULL)
    {
        /* We reached the end of the list without finding the device - failed */
        return 1;
    }

    /* Issue service that we have removed a device */
    device_notify_announce(cur, 0);
    device_notify_announce(cur, 1);

    return 0;
}

/*******************************************************************
 Function:      devices_finddevice
 Description:   Find a device given the device_id
 Parameters:    device_id = device id to find
 Returns:       pointer to the device, if found
                NULL if not found
 ******************************************************************/
device_t *devices_find(int device_id)
{
    device_t *cur;

    for (cur=devices;
         cur && cur->device_id != device_id;
         cur=cur->next)
        ; /* Search is in the for loop */

    return cur;
}


/*******************************************************************
 Function:      devices_finddevice_after
 Description:   Find a device AFTER a given the device_id
 Parameters:    device_id = device id to find the device after, or 0 for the first one
 Returns:       pointer to the next device, if found
                NULL if no more devices found
 ******************************************************************/
device_t *devices_after(device_t *device)
{
    unsigned long device_id = device ? device->device_id : 0;
    device_t *cur;

    for (cur=devices;
         cur;
         cur=cur->next)
    {
        if (device_id == 0)
            break;

        if (cur->device_id == device_id)
            device_id = 0;
    }

    return cur;
}
