/*******************************************************************
 * File:        device
 * Purpose:     Management of a single device and its interfaces
 * Author:      Chris Johns
 ******************************************************************/

#include <stdlib.h>
#include <string.h>

#include "callx.h"
#include "fortify.h"

#include "modhead.h"
#include "BlockDevices.h"
#include "device.h"
#include "devices.h"
#include "str.h"

#include <stdio.h>

/* A counter to use for unnamed devices */
static int unnamed_counter = 1;


/*******************************************************************
 Function:      device_create
 Description:   Create a reference to a device
 Parameters:    location_id = location of the device
                capabilities = capabilities flags
                provider -> provider name (will be copied)
                driver_code -> the code to call for the driver
                driver_ws -> r12 value for the driver
 Returns:       pointer to the device_t, or NULL if failed
 ******************************************************************/
device_t *device_create(
              device_info_t * info,
              void *          driver_code,
              void *          driver_ws)
{
    device_t *device;

    device = calloc(1, sizeof(*device));
    if (device == NULL)
        goto failed;

    /* Copy the fields to our device information block */
    device->info.device_flags        = info->device_flags;
    device->info.interface_type      = info->interface_type;
    device->info.media_type          = info->media_type;
    device->info.parent_device       = info->parent_device;
    device->info.partition_scheme    = info->partition_scheme;
    device->info.partition_index     = info->partition_index;
    device->info.partition_type      = info->partition_type;
    device->info.block_count         = info->block_count;
    device->info.block_size          = info->block_size;

    /* Allocations for the name are slightly harder.
     * The name on registration can be just a simple string, or it might be a device path.
     * If it's a simple string, we need to construct a path based on the parents.
     */
    {
        const char *name = info->name;
        if (name == NULL || name[0] == '\0')
        {
            /* No name was given. Let's use an incrementing value. */
            char newname[16];
            sprintf(newname, "device/%i", unnamed_counter++);
            device->info.name = strdup(newname);
            if (device->info.name == NULL)
                goto failed;
        }
        else if (name[0] == '/')
        {
            /* They gave a full device path, so just copy it */
            device->info.name = strdup(info->name);
            if (device->info.name == NULL)
                goto failed;
        }
        else if (device->info.parent_device)
        {
            int ssize;
            /* If there's a parent device, we construct a new name based on it */
            device_t *parentdevice = devices_find(device->info.parent_device);
            if (parentdevice == NULL)
                goto failed;
            ssize = strlen(parentdevice->info.name) + 1 + strlen(info->name) + 1;
            device->info.name = calloc(1, ssize);
            if (device->info.name == NULL)
                goto failed;
            sprintf(device->info.name, "%s/%s", parentdevice->info.name, info->name);
        }
        else
        {
            /* They gave a name without a leading '/', so prepend one */
            device->info.name = calloc(1, strlen(info->name));
            if (device->info.name == NULL)
                goto failed;
            device->info.name[0] = '/';
            strcpy(device->info.name + 1, info->name);
        }
    }

    /* The other strings are easier to copy */
#define STRDUP_OR_FAIL(_to, _from) \
    do { \
        if (_from) \
        { \
            _to = strdup(_from); \
            if (_to == NULL) \
                goto failed; \
        } \
        else \
        { \
            _to = NULL; \
        } \
    } while (0)

    STRDUP_OR_FAIL(device->info.manufacturer, info->manufacturer);
    STRDUP_OR_FAIL(device->info.product, info->product);
    STRDUP_OR_FAIL(device->info.serial, info->serial);
    STRDUP_OR_FAIL(device->info.firmware, info->firmware);

    device->driver_code = driver_code;
    device->driver_ws = driver_ws;

    return device;

failed:
    if (device)
    {
        free(device->info.name);
        free(device->info.manufacturer);
        free(device->info.product);
        free(device->info.serial);
        free(device->info.firmware);
        free(device);
    }
    return NULL;
}

/*************************************************** Gerph *********
 Function:      device_check_transfer
 Description:   Check whether a transfer would be valid
 Parameters:    device-> the device we're operating on
                transfer = the transfer address
 Returns:       pointer to error to return, or NULL if operation is acceptable
 ******************************************************************/
_kernel_oserror *device_check_transfer(device_t *device, transfer_block_t *transfer)
{
    blockaddr_t transfer_end;
    int blocks_count;
    blockaddr_t blocks_count_ll;

    blocks_count = (transfer->count + device->info.block_size - 1) / device->info.block_size;

    LL_UI2L(blocks_count_ll, blocks_count);
    LL_ADD(transfer_end, transfer->lba, blocks_count_ll);
    if (LL_UCMP(transfer_end, >, device->info.block_count))
    {
        return err_TransferOutsideDevice;
    }

    return NULL;
}

/*******************************************************************
 Function:      device_destroy
 Description:   Destroy the device
 Parameters:    device-> the device we're destroying (assumed to already have
                      been unlinked).
 Returns:       none
 ******************************************************************/
void device_destroy(device_t *device)
{
    if (device)
    {
        free(device->info.name);
        device->info.manufacturer = NULL;
        free(device->info.manufacturer);
        device->info.manufacturer = NULL;
        free(device->info.product);
        device->info.product = NULL;
        free(device->info.serial);
        device->info.serial = NULL;
        free(device->info.firmware);
        device->info.firmware = NULL;
        free(device);
    }
}


/*******************************************************************
 Function:      device_read
 Description:   Read data from a device.
 Parameters:    device -> the device to read from
                flags = read flags
                block -> transfer block
 Returns:       pointer to an error block if failed
                NULL if successful
 ******************************************************************/
_kernel_oserror * device_read(device_t *device, unsigned long flags, transfer_block_t *block)
{
    _kernel_oserror *err;
    err = device_check_transfer(device, block);
    if (err)
        return err;

    return _callx(device->driver_code, device->driver_ws,
                 _INR(0, 3),
                 BlockDeviceOp_Read, device->device_id, flags, block);
}


/*******************************************************************
 Function:      device_write
 Description:   Write data to a device.
 Parameters:    device -> the device to write to
                flags = read flags
                block -> transfer block
 Returns:       pointer to an error block if failed
                NULL if successful
 ******************************************************************/
_kernel_oserror * device_write(device_t *device, unsigned long flags, transfer_block_t *block)
{
    _kernel_oserror *err;
    if (device->info.device_flags & DeviceFlag_ReadOnly)
        return err_ReadOnly;

    err = device_check_transfer(device, block);
    if (err)
        return err;

    return _callx(device->driver_code, device->driver_ws,
                 _INR(0, 3),
                 BlockDeviceOp_Write, device->device_id, flags, block);
}


/*******************************************************************
 Function:      device_verify
 Description:   Verify data on a device.
 Parameters:    device -> the device to write to
                flags = read flags
                block -> transfer block (address ignored)
 Returns:       pointer to an error block if failed
                NULL if successful
 ******************************************************************/
_kernel_oserror * device_verify(device_t *device, unsigned long flags, transfer_block_t *block)
{
    _kernel_oserror *err;

    err = device_check_transfer(device, block);
    if (err)
        return err;

    return _callx(device->driver_code, device->driver_ws,
                 _INR(0, 3),
                 0, device->device_id, flags, block);
}


/*******************************************************************
 Function:      device_miscop
 Description:   Perform miscellaneous operations on the device
 Parameters:    device -> the device to write to
                op = operation to perform
                r-> registers for operation
 Returns:       pointer to an error block if failed
                NULL if successful
 ******************************************************************/
_kernel_oserror * device_miscop(device_t *device, unsigned long op, _kernel_swi_regs *r)
{
    return _callx(device->driver_code, device->driver_ws,
                 _INR(0, 3),
                 BlockDeviceOp_MiscOp, device->device_id, op, r);
}


/*******************************************************************
 Function:      device_driverop
 Description:   Perform driver operations on the device
 Parameters:    device -> the device to write to
                op = operation to perform
                r-> registers for operation
 Returns:       pointer to an error block if failed
                NULL if successful
 ******************************************************************/
_kernel_oserror * device_driverop(device_t *device, unsigned long op, _kernel_swi_regs *r)
{
    return _callx(device->driver_code, device->driver_ws,
                 _INR(0, 3),
                 BlockDeviceOp_DriverOp, device->device_id, op, r);
}
