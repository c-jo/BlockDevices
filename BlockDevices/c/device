/*******************************************************************
 * File:        device
 * Purpose:     Management of a single device and its interfaces
 * Author:      Chris Johns
 ******************************************************************/

#include <stdlib.h>
#include <string.h>

#include "callx.h"
#include "fortify.h"

#include "modhead.h"
#include "BlockDevices.h"
#include "device.h"
#include "str.h"

#include <stdio.h>

/*******************************************************************
 Function:      device_create
 Description:   Create a reference to a device
 Parameters:    location_id = location of the device
                capabilities = capabilities flags
                provider -> provider name (will be copied)
                driver_code -> the code to call for the driver
                driver_ws -> r12 value for the driver
 Returns:       pointer to the device_t, or NULL if failed
 ******************************************************************/
device_t *device_create(
              device_info_t * info,
              void *          driver_code,
              void *          driver_ws)
{
    device_t *device;

    device = calloc(1, sizeof(*device));
    if (device == NULL)
        goto failed;

    memcpy(&device->info, info, sizeof(device->info));
    // TODO: strdup the srings

    device->driver_code = driver_code;
    device->driver_ws = driver_ws;

    return device;

failed:
    if (device)
    {
        free(device);
    }
    return NULL;
}

/*******************************************************************
 Function:      device_destroy
 Description:   Destroy the device
 Parameters:    device-> the device we're destroying (assumed to already have
                      been unlinked).
 Returns:       none
 ******************************************************************/
void device_destroy(device_t *device)
{
    free(device);
}


/*******************************************************************
 Function:      device_read
 Description:   Read data from a device.
 Parameters:    device -> the device to read from
                flags = read flags
                block -> transfer block
 Returns:       pointer to an error block if failed
                NULL if successful
 ******************************************************************/
_kernel_oserror * device_read(device_t *device, unsigned long flags, transfer_block_t *block)
{
    return _callx(device->driver_code, device->driver_ws,
                 _INR(0, 3),
                 1, device->device_id, flags, block);
}


/*******************************************************************
 Function:      device_write
 Description:   Write data to a device.
 Parameters:    device -> the device to write to
                flags = read flags
                block -> transfer block
 Returns:       pointer to an error block if failed
                NULL if successful
 ******************************************************************/
_kernel_oserror * device_write(device_t *device, unsigned long flags, transfer_block_t *block)
{
    if (device->info.device_flags & DeviceFlag_ReadOnly)
        return err_ReadOnly;

    return _callx(device->driver_code, device->driver_ws,
                 _INR(0, 3),
                 2, device->device_id, flags, block);
}
