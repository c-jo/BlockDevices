/*******************************************************************
 * File:        module
 * Purpose:     BlockDevices module interface
 * Author:      Chris Johns
 ******************************************************************/

#include <stdlib.h>
#include <stdio.h>

#include "kernel.h"
#include "swis.h"

#include "modhead.h"
#include "commands.h"
#include "devices.h"

// Are we up and running yet? (has startup been announced)
static int running;

/*******************************************************************
 Function:      announce
 Description:   Announce the startup or death of the module
 Parameters:    started = 1 for starting, 0 for dying
 Returns:       none
 ******************************************************************/
static void announce(int started)
{
    if (started)
    {
        _swix(OS_ServiceCall, _IN(0), Service_BlockDevices_Started);
    }
    else
    {
        _swix(OS_ServiceCall, _IN(0), Service_BlockDevices_Dying);
    }
}


/***************************************************************************
 * Function:     Mod_Init
 * Description:  Initialise the module, setting up vectors, callbacks and
 *               any other parts of the system necessary for the module to
 *               function.
 * Parameters:   tail        = pointer to command line (control terminated)
 *               podule_base = address of podule module was started from, or
 *                             NULL if none
 *               pw          = private word for module
 * On exit:      Return NULL for successful initialisation, or a pointer to
 *               an error block if the module could not start properly.
 **************************************************************************/
_kernel_oserror *Mod_Init(const char *tail, int podule_base, void *pw)
{
    running = 0;
    if (devices_init())
    {
        /* Failed to start up? */
        return err_InitFailed;
    }

    _swix(OS_AddCallBack, _INR(0, 1), StartupCallback_Entry, pw);
    return NULL;
}


/***************************************************************************
 * Function:     Mod_Final
 * Description:  Finalise the module, shutting down any systems necessary,
 *               freeing vectors and releasing workspace
 * Parameters:   fatal       = fatality indicator; 1 if fatal, 0 if
 *                             reinitialising
 *               podule_base = address of podule module was started from, or
 *                             NULL if none
 *               pw          = private word for module
 * On exit:      Return 0 for successful finalisation, or a pointer to an
 *               error block if module was not shutdown properly.
 **************************************************************************/
_kernel_oserror *Mod_Final(int fatal, int podule_base, void *pw)
{
    _swix(OS_RemoveCallBack, _INR(0, 1), StartupCallback_Entry, pw);
    devices_final();
    return NULL;
}


/***************************************************************************
 * Function:     StartupCallback_Handler
 * Description:  Generic handler function
 * Parameters:   r  = pointer to register block on entry
 *               pw = private word for module
 * On exit:      Update r to alter return values
 *               Return NULL to return with V clear
 *               Return an error pointer to set V and r0
 **************************************************************************/
_kernel_oserror *StartupCallback_Handler(_kernel_swi_regs *r, void *pw)
{
    running = 1;
    announce(1);
    return NULL;
}


/***************************************************************************
 * Description:  Star command and help request handler routines.
 * Parameters:   arg_string = pointer to argument string (control
 *                            terminated), or output buffer
 *               argc       = number of arguments passed
 *               number     = command number (see CMD_* definitions below)
 *               pw         = private word for module
 * On exit:      If number indicates a help entry:
 *                 To output, assemble zero terminated output into
 *                 arg_string, and return help_PRINT_BUFFER to print it.
 *                 To stay silent, return NULL.
 *                 To given an error, return an error pointer.
 *                 [In this case, you need to cast the 'const' away]
 *               If number indicates a configure option:
 *                 If arg_string is arg_STATUS, then print status, otherwise
 *                 use argc and arg_string to set option.
 *                 Return NULL for no error.
 *                 Return one of the four error codes below (configure_*)
 *                 for a generic error message.
 *                 Return an error pointer for a custom error.
 *               If number indicates a command entry:
 *                 Execute the command given by number, and arg_string.
 *                 Return NULL on success,
 *                 Return a pointer to an error block on failure.
 **************************************************************************/
_kernel_oserror *Mod_Command(const char *arg_string, int argc, int number,
                             void *pw)
{
    if (!running) return err_Starting;

    if (number == CMD_BlockDevices)
        return Cmd_BlockDevices();
    /*if (number == CMD_BlockDeviceInfo)
        return Cmd_BlockDeviceInfo(arg_string, argc);
    */
    return NULL;
}


/*******************************************************************
 Function:      Mod_Service
 Description:   Service call handler
 Parameters:    service = service number
                r  = pointer to register block on entry
                pw = private word for module
 Returns:       none
 ******************************************************************/
void Mod_Service(int service, _kernel_swi_regs *r, void *pw)
{
}

/*******************************************************************
 Function:      SWI_Enumerate
 Description:   Enumerate the devices that we have registered
 Parameters:    number = SWI number
                r -> registers block on entry for update
                    =>  R0  = first call value, or 0 to start
                    <=  R0  = 0 for no more, or device id
                        R1 -> device info
                pw -> module private word
 Returns:       pointer to an error block if failed
                NULL if successful
 ******************************************************************/
_kernel_oserror *SWI_Enumerate(int number, _kernel_swi_regs *r, void *pw)
{
    device_t *device = devices_after(devices_find(r->r[0]));

    if (device == NULL)
    {
        r->r[0] = 0;
    }
    else
    {
        r->r[0] = (int)device->device_id;
        r->r[1] = (int)&device->info;
    }
    return NULL;
}

/*******************************************************************
 Function:      SWI_Read
 Description:   Read blocks from the device
 Parameters:    number = SWI number
                r -> registers block on entry for update
                    =>  R0 =  device id
                        R1 =  flags
                        R2 -> transfer block
                pw -> module private word
 Returns:       pointer to an error block if failed
                NULL if successful
 ******************************************************************/
_kernel_oserror *SWI_Read(int number, _kernel_swi_regs *r, void *pw)
{
    device_t *device = devices_find(r->r[0]);
    if (device == NULL)
        return err_BadDevice;

    return device_read(device,
                       (unsigned long)r->r[1],
                       (transfer_block_t*)r->r[2]);
}

/*******************************************************************
 Function:      SWI_Write
 Description:   Write blocks to the device
 Parameters:    number = SWI number
                r -> registers block on entry for update
                    =>  R0 =  device id
                        R1 =  flags
                        R2 -> transfer block
                pw -> module private word
 Returns:       pointer to an error block if failed
                NULL if successful
 ******************************************************************/
_kernel_oserror *SWI_Write(int number, _kernel_swi_regs *r, void *pw)
{
    device_t *device = devices_find(r->r[0]);
    if (device == NULL)
        return err_BadDevice;

    return device_write(device,
                        (unsigned long)r->r[1],
                        (transfer_block_t*)r->r[2]);
}

/*******************************************************************
 Function:      SWI_Register
 Description:   Register a new block device
 Parameters:    number = SWI number
                r -> registers block on entry for update
                    => R0  = Flags (currently unused)
                       R1 -> Device info block
                       R2 -> Code entry point
                       R3 -> Code entry workspace
                    <= R0  = device identifier allocated
                pw -> module private word
 Returns:       pointer to an error block if failed
                NULL if successful
 ******************************************************************/
_kernel_oserror *SWI_Register(int number, _kernel_swi_regs *r, void *pw)
{
    device_info_t *info = (device_info_t *)r->r[1];
    void *driver_code = (void *)r->r[2];
    void *driver_ws = (void *)r->r[3];
    device_t *dev;

    if (!running) return err_Starting;

    if (info->device_flags & DeviceFlag_Valid)
        return err_RegisterFailedFlags; /* They gave unsupported flags */

    dev = device_create(
        info, driver_code, driver_ws);

    if (dev == NULL)
        return err_RegisterFailed;

    if (devices_register(dev))
    {
        /* Failed to register */
        device_destroy(dev);
        return err_RegisterFailed;
    }

    r->r[0] = (int)dev->device_id;
    return NULL;
}

/*******************************************************************
 Function:      SWI_Deregister
 Description:   Deregister a device from the deviceController
 Parameters:    number = SWI number
                r -> registers block on entry for update
                    => R0 = Device identifier to deregister
                pw -> module private word
 Returns:       pointer to an error block if failed
                NULL if successful
 ******************************************************************/
_kernel_oserror *SWI_Deregister(int number, _kernel_swi_regs *r, void *pw)
{
    int device_id = r->r[0];

    if (!running) return err_Starting;

    if (devices_deregister(device_id))
    {
        return err_BadDevice;
    }

    return NULL;
}
