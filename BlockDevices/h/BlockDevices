/*******************************************************************
 * File:        BlockDevice
 * Purpose:     Constants for accessing the block driver interfaces
 * Author:      Chris Johns
 ******************************************************************/

#ifndef BlockDevice_H
#define BlockDevice_H

#ifndef CMHG
#ifdef USE_LONG_LONG
// longlong.h defines USE_LONG_LONG itself
#undef USE_LONG_LONG
#include "longlong.h"
#define UINT64 ulonglong_t
#else
#include <stdint.h>
#define UINT64 uint64_t
#endif

// Invalid device id
#define DeviceId_Invalid (0)

/* Flags understood in the device information block */
#define DeviceFlag_ReadOnly         (1<<0)      /* Device cannot be written to */
#define DeviceFlag_SupportsEject    (1<<1)      /* Supports the eject operation */
#define DeviceFlag_Debug            (1<<31)     /* Debug enabled */
#define DeviceFlag_Valid            ((1<<2)-1) | (1<<31)  /* Mask of the valid device flags */

// The address of a block on a device
typedef UINT64 blockaddr_t;

// Block device info block
typedef struct device_info_s {
    unsigned    device_flags;
    unsigned    interface_type:16;
    unsigned    media_type:16;
    unsigned    parent_device;
    unsigned    partition_scheme:8;
    unsigned    partition_index:24;
    unsigned    partition_type;
    blockaddr_t block_count;
    unsigned    block_size;
    char *      name;
    char *      manufacturer;
    char *      product;
    char *      serial;
    char *      firmware;
} device_info_t;

// Interface types
typedef enum interface_type_e {
    BlockDevice_Interface_Unknown = 0,
    BlockDevice_Interface_FDC = 1,
    BlockDevice_Interface_ST506 = 2,
    BlockDevice_Interface_IDE = 3,
    BlockDevice_Interface_SATA = 4,
    BlockDevice_Interface_SCSI = 5,
    BlockDevice_Interface_USB = 6,
    BlockDevice_Interface_NVMe = 7
} interface_type_t;

// Media types
typedef enum media_type_e {
    BlockDevice_Media_Unknown = 0,
    BlockDevice_Media_FloppyDisc = 1,
    BlockDevice_Media_HardDisc = 2,
    BlockDevice_Media_Optical = 3,
    BlockDevice_Media_SSD = 4
} media_type_type_t;

// Partition schemes
typedef enum partition_scheme_e {
    BlockDevice_PartitionScheme_None = 0,
    BlockDevice_PartitionScheme_MBR = 1,
    BlockDevice_PartitionScheme_GPT = 2
} partition_scheme_t;

// Used to control read / writes
typedef struct transfer_block_s {
  blockaddr_t lba;
  void *      address;
  unsigned    count;
} transfer_block_t;

// Constants for the BlockDevice operations
#define BlockDeviceOp_Read          (1)
#define BlockDeviceOp_Write         (2)
#define BlockDeviceOp_Verify        (3)

/* Various operations on the BlockDevice at different levels */
#define BlockDeviceOp_MiscOp        (4)
/* MiscOps take the form of bit field defining the type of operations:
    b28-31:     domain:
                    0   Device - operations that address the device itself
                    1   Media - operations that address the media storing data
                    2   Security - operations that control the security of data
                    3   Sector - operations that affect sector data
    b27         status/health request
    b23-26      data type in R1/R2:
                    0   opaque
                    1   read string data in R2, length in R3
                    2   64bit value (low in R2, high in R3)
                    3   read data in R2, length in R3
                    4   R2 contains a reference to a block
                    5   R2 contains a reference to a block and block count
                    6   R2 contains a reference to a list of blocks
                    7   R2 contains a reference to a list of blocks and counts
    b16-22      reserved, must be 0
    b0-15:      dependant on the domain
 */
#define BlockDeviceMiscOp_Device      (0<<28)
#define BlockDeviceMiscOp_Media       (1<<28)
#define BlockDeviceMiscOp_Sector      (2<<28)
#define BlockDeviceMiscOp_Security    (3<<28)
#define BlockDeviceMiscOpFlag_Status  (1<<27)
#define BlockDeviceMiscOpFlag_DataOpaque  (0<<23)
#define BlockDeviceMiscOpFlag_DataString  (1<<23)
#define BlockDeviceMiscOpFlag_Data64Bit   (2<<23)
#define BlockDeviceMiscOpFlag_DataData    (3<<23)
#define BlockDeviceMiscOpFlag_DataBlock             (4<<23)
#define BlockDeviceMiscOpFlag_DataBlockAndCount     (5<<23)
#define BlockDeviceMiscOpFlag_DataBlocks            (6<<23)
#define BlockDeviceMiscOpFlag_DataBlocksAndCounts   (7<<23)

/* Reserved device operations (not currently defined but set aside for now) */
#define BlockDeviceMiscOp_Device_PowerEject  (BlockDeviceMiscOp_Device | 0) /* Eject the media, removing block device */
#define BlockDeviceMiscOp_Device_Identify    (BlockDeviceMiscOp_Device | 1) /* Flash a light or something */
#define BlockDeviceMiscOp_Media_Manufacturer (BlockDeviceMiscOp_Media | BlockDeviceMiscOpFlag_DataString | 0)
#define BlockDeviceMiscOp_Media_Model        (BlockDeviceMiscOp_Media | BlockDeviceMiscOpFlag_DataString | 1)
#define BlockDeviceMiscOp_Media_SMART        (BlockDeviceMiscOp_Media | BlockDeviceMiscOpFlag_DataData | 0)
#define BlockDeviceMiscOp_Sector_Trim        (BlockDeviceMiscOp_Sector | 0)

#endif

// Service calls
#define ServiceBase_BlockDevices 0x81200
#define Service_BlockDevices_Started (ServiceBase_BlockDevices + 0)
#define Service_BlockDevices_Dying (ServiceBase_BlockDevices + 1)
#define Service_BlockDevices_DeviceAdded (ServiceBase_BlockDevices + 2)
#define Service_BlockDevices_DeviceRemoved (ServiceBase_BlockDevices + 3)

// Error numbers
#define ErrorBase_BlockDevices 0x822300
#define ErrorNumber_NoSuchDevice (ErrorBase_BlockDevices + 0)
#define ErrorNumber_DeviceInUse (ErrorBase_BlockDevices + 1)

// SWI numbers
#ifndef BlockDevice_Enumerate
#define BlockDevice_0 0x5A6C0
#define BlockDevice_Enumerate (BlockDevice_0 + 0)
#define BlockDevice_Info (BlockDevice_0 + 1)
#define BlockDevice_Read (BlockDevice_0 + 2)
#define BlockDevice_Write (BlockDevice_0 + 3)
#define BlockDevice_Verify (BlockDevice_0 + 4)
#define BlockDevice_MiscOp (BlockDevice_0 + 5)
#define BlockDevice_Register (BlockDevice_0 + 16)
#define BlockDevice_Deregister (BlockDevice_0 + 17)
#endif

#endif
