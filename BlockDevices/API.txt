Device information block
------------------------

+0  device_flags:
        b0:     Device is read only
        b1:     Device supports eject
        b31:    Device is being debugged
        b2-30:  Must be 0
+4  Interface and media type
        b0-7:  Interface type
                    0 = Unknown
                    1 = FDC
                    2 = ST506
                    3 = IDE
                    4 = SATA
                    5 = SCSI
                    6 = NVMe
                    other: not currently defined
        b8-15:  Interface connection
                    0 = Unknown
                    1 = Motherboard or SOC
                    2 = Podule
                    3 = PCI or PCIe
                    4 = Parallel (printer port)
                    5 = Serial (RS232)
                    6 = USB
                    other: not currently defined
        b16-23: Media type
                    0 = Unknown
                    1 = FloppyDisc
                    2 = HardDisc
                    3 = Optical
                    4 = SSD
                    5 = RAM
                    other: not currently defined
        b24-31: Reserved
+8  Parent_device id, or 0 if none
+12 Number of blocks on device (64-bit)
+20 Block size (in bytes)
+24 Pointer to 0-terminated string describing device

Transfer Block
--------------
+0  Block address (64-bit)
+8  Memory address
+12 Number of blocks to transfer

SWI API

SWI BlockDevices_Info
=>  R0 = device id
<=  R1 = device information block

Returns the device information block for the given device id.

SWI BlockDevices_Enumerate
=>  R0 = last device id, or 0 to start enumeration
<=  R0 = 0 if no more devices
         or device id of this device
    R1 = device information block

Enumerates the currently registered devices.

SWI BlockDevices_EnumerateChildren
=>  R0 = last device id, or 0 to start enumeration
    R2 = parent device
<=  R0 = 0 if no more devices
         or device id of this device
    R1 = device information block

Enumerates the currently registered devices with the given parent.


SWI BlockDevices_Read
=>  R0 = device id to read to
    R1 = flags for the read operation (currenrly unused)
    R2 = transfer block

Reads data from the block device.

On return from the read operation, the transfer block should return the block
updated with a new LBA, pointer to memory and number of bytes, even if the
transfer failed. This is to allow the caller to retry using the same block.

Errors:
    BadDevice: returned when the device id supplied is not valid.


SWI BlockDevices_Write
=>  R0 = device id to write to
    R1 = flags for the write operation (currently unused)
    R2 = transfer block

Writes data to the block device.

Errors:
    ReadOnly: Reported when the device is not writeable.


SWI BlockDevices_Verify
=>  R0 = device id to write to
    R1 = flags for the write operation (currently unused)
    R2 = transfer block:
            <as for BlockDevices_Read>

Performs a verify of the specified blocks. The address is unused.


SWI BlockDevices_DeviceOp
SWI BlockDevices_MediaOp
SWI BlockDevices_SecurityOp
SWI BlockDevices_SectorOp

=>  R0 = Device id to operate on
    R1 = Operation
    other registers dependant on operation
<=  registers dependant on operation

Performs miscellaneous operations on the device, media, security or sector.


SWI BlockDevices_DriverOp
=>  R0 = device id to operate on
    all other registers are driver specfic.

Performs a low-level driver operation. These are driver specific and should
only be used where necessary, such as for driver support software.


SWI BlockDevices_Register

=>  R0 = flags (must be 0)
    R1 = pointer to the device information block
    R2 = pointer to entry point
    R3 = entry point R12
<=  R0 = device id for registered device

Register a block device driver.

Errors:
    RegisterFailed: Reported when the device is not recognised.
    RegisterFailedFlags: Reported when the flags supplied are not recognised.

Entrypoint:

=>  R0 = Operation code:
            1 => Read data
            2 => Write data
            3 => Verify
            4 => DeviceOp
            5 => MediaOp
            6 => SecurityOp
            7 => SectorOp
            8 => DriverOp

    R1..R9 = parameters dependant on the entry point


SWI BlockDevices_Deregister

=>  R0 = device id to deregister

Deregister a block device driver.

SWI BlockDevices_Rescan

=> R0 = Device id, or 0 for all

Remove and re-add the given device (or all devices) to cause other modules to
rescan them. For exmple a parttion editor will call this on the device to cause
anyhing that has read the partition table to re-read it.


Service Calls
=============

Service_BlockDevices_Started (0x81200)
Service_BlockDevices_Dying (0x81201)

The block devices system is starting or dying.

Service_BlockDevices_DeviceAdded (0x81202)
Service_BlockDevices_DeviceRemoved (0x81203)

The device in R0 has been added or removed.
