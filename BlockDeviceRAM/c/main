/*
 * Copyright (c) 2023, Chris Johns
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the copyright holder nor the names of their
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <stdlib.h>
#include <stdio.h>
#include <stdint.h>
#include <string.h>
#include <time.h>
#include "swis.h"

#include "Global/HALDevice.h"
#include "Global/NewErrors.h"

#include "RAMDevice.h"
#include "BlockDeviceRAMHdr.h"
#include "BlockDevices.h"
#include "RAM_IO.h"

#include "devices.h"

/* A quick macro to silence compiler warnings about unused parameters */
#define IGNORE(x) do { (void)(x); } while(0)

static _kernel_oserror err_UnkDevice = { 0, "Unknown device." };
static _kernel_oserror err_BadReason = { 0, "Bad reason code." };
static _kernel_oserror err_TestError = { 0, "Test error." };

//static void *block4k;
//static uint32_t block4k_pci;

_kernel_oserror *module_initialise(const char *cmd_tail, int podule_base, void *pw)
{
  _kernel_oserror *e = 0;

  IGNORE(cmd_tail);
  IGNORE(podule_base);
  IGNORE(pw);

  unsigned req_blocks = 1000000;

  mydevice.info.interface_type = BlockDevice_Interface_NVMe;

  mydevice.info.block_size = 512;
  mydevice.info.name = "BlockDevices RAM Disc";
  mydevice.info.manufacturer = "";
  mydevice.info.product = "RAMDISC";
  mydevice.info.serial = "";
  mydevice.info.firmware = "";

  unsigned max_size;

  if ((e = _swix(OS_DynamicArea, _INR(0,8)|_OUT(1)|_OUT(3)|_OUT(5),
      0, -1,  req_blocks * mydevice.info.block_size, -1, 1<<7, // | 1<<10 /* Can't Drag, Sparse */,
      -1 /*req_blocks * mydevice.info.block_size*/, 0, -1,
      "BlockDevice RAM",
      &mydevice.dynamic_area, &mydevice.area_base, &max_size)) != 0) return e;

  mydevice.info.block_count = max_size / (unsigned)mydevice.info.block_size;

  if (mydevice.info.block_count != req_blocks)
    printf("*** Wanted %d blocks, got %lld\n",
           req_blocks, mydevice.info.block_count);

  devices_register(pw);
  return 0;
}

_kernel_oserror *module_finalise(int fatal, int podule, void *pw)
{
  IGNORE(fatal);
  IGNORE(podule);

  _swix(OS_DynamicArea, _INR(0,1), 1, mydevice.dynamic_area);

  devices_deregister(pw, 1);
  //mmc2_Final();
  //_swix(OS_Hardware, _IN(0)|_IN(8), &dev, 3);
  //if (devices)
  //  nvme_dev_destroy(devices);

  return 0;
}

void module_service(int service, _kernel_swi_regs *r, void *pw)
{
  (void)r;

  printf("module_service %d (&%x)\n", service, service);
    switch (service)
    {
        case Service_BlockDevices_Started:
            devices_register(pw);
            break;

        case Service_BlockDevices_Dying:
            devices_deregister(pw, 0);
            break;
    }
}

_kernel_oserror *Driver_Handler(_kernel_swi_regs *r, void *pw)
{
  ram_device_t *device = devices_find(r->r[1]);
  if (!device) return &err_UnkDevice;

  switch (r->r[0]) {
  case 1:
  case 2:
    return ram_io(r->r[0], device, r->r[2], (transfer_block_t*)r->r[3]);

  default:
    return &err_BadReason;
  }

//  return NULL;
}
