%YAML 1.0
---

# Example .robuild.yml file

# Source is optional (NYI), and should be a URL to source the content from
#source: <url>

# Defines a list of jobs which will be performed.
# Only 1 job will currently be executed.
jobs:
  build:
    # Env defines system variables which will be used within the environment.
    # Multiple variables may be assigned.
    env:
      "Sys$Environment": ROBuild
      "BUILD32": 1

    # Directory to change to before running script
    #dir: <working directory>

    # Commands which should be executed to perform the build.
    # The build will terminate if any command returns a non-0 return code or an error.
    script:
      # Set up some build environment bits
      - cdir $.Build
      - cdir $.Build.Export
      - cdir $.Build.Export.C
      - cdir $.Build.Install
      - set Build$Dir $.Build
      - set Exports$Dir <Build$Dir>.Export
      - set CExport$Dir <Exports$Dir>.C
      - set Install$Dir <Build$Dir>.Install
      - set C$Path <CExport$Dir>.,<C$Path>
      - set Locale UK

      # Maybe this lot should actually be in a makefile?
      - dir BlockDevices
      # Required because of a bug in the Makefiles
      - cdir built
      - "echo *** BlockDevices: Exports"
      - amu -f Makefile export
      - "echo *** BlockDevices: Module build"
      - amu -f Makefile ram
      #- amu -f Makefile docs
      - dir ^

      - dir BlockDeviceDummy
      - "echo *** BlockDeviceDummy: Module build"
      - amu -f Makefile ram
      - dir ^

      # We should try loading the modules and running the examples to make sure that they work
      - "echo *** BlockDevices: Load BlockDevices"
      - rmload BlockDevices.rm32.BlockDevices
      - "echo *** BlockDeviceDummy: Load BlockDeviceDummy"
      - rmload BlockDeviceDummy.rm32.BlockDeviceDummy

      # Simple tests
      - "echo *** Test BlockDevices command"
      - BlockDevices
      - "echo *** Test killing the block device driver module"
      - RMKill BlockDeviceDummy
      - "echo *** Shouldn't crash when listing devices after killing"
      - BlockDevices
      - rmload BlockDeviceDummy.rm32.BlockDeviceDummy

      - "echo *** Copy artifacts"
      - cdir Artifacts
      #- cdir Artifacts.prminxml
      - copy BlockDevices.rm32.BlockDevices Artifacts.* ~CV
      #- copy BlockDevices.prminxml.* Artifacts.prminxml.* R~CV
      #- copy BlockDevices.built.docs.* Artifacts.prminxml.* ~CVR
      - copy BlockDeviceDummy.rm32.BlockDeviceDummy Artifacts.* ~CV
      - cdir Artifacts.h
      - copy <CExport$Dir>.h.BlockDevices Artifacts.h.BlockDevices ~CV
      #- copy examples Artifacts.examples ~CVR
      - copy LICENSE Artifacts.* ~CV

    # Outputs from the build are defined in artifacts
    # These are a list of artifacts to report directories or files.
    # Only a single item is currently supported.
    artifacts:
      # Each element of the artifacts should have a path key, which gives the file or
      # directory to return.
      - path: Artifacts
